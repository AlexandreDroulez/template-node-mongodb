let httpStatus,_;_d0a‍.x([["default",()=>tokenMiddleware]]);_d0a‍.w("http-status",[["default",["httpStatus"],function(v){httpStatus=v}]]);_d0a‍.w("lodash",[["default",["_"],function(v){_=v}]]);

// fixme
// import { verifyToken } from '../services/jwt';
// import { getUserById, updateUser } from '../database/user';
// import { isTokenUserIssuer } from '../utils';
//
// import { USER } from '../../libs/errors/user';
//
// const TOKEN_REGEX = new RegExp('^Bearer (.*)$');

               function tokenMiddleware({ roles } = {}) {
  return async (req, res, next) => {
    try {
      // const headerAuth = req.get('Authorization');
      // const accessToken = _.get(req, 'query.access_token');
      //
      // delete req.query.access_token;
      //
      // let token = accessToken;
      //
      // if (!accessToken && !headerAuth) {
      //   return res.status(USER.NO_TOKEN.status)
      //     .send(USER.NO_TOKEN);
      // }
      //
      // if (!token) {
      //   // eslint-disable-next-line prefer-destructuring
      //   token = headerAuth.match(TOKEN_REGEX)[1];
      // }
      //
      // if (!token) {
      //   return res.status(USER.NO_TOKEN.status).send(USER.NO_TOKEN);
      // }
      //
      // const userToken = verifyToken(token);
      // if (!userToken) {
      //   return res.status(USER.BAD_BEARER.status).send(USER.BAD_BEARER);
      // }
      //
      // const user = await getUserById(userToken.user_id);
      // if (!user) {
      //   return res.status(USER.UNKNOWN_USER.status).send(USER.UNKNOWN_USER);
      // }
      //
      // if (user.is_locked) {
      //   return res.status(USER.LOCKED.status).send(USER.LOCKED);
      // }
      //
      // if (roles && !roles.includes(user.role)) {
      //   return res.sendStatus(httpStatus.FORBIDDEN);
      // }
      //
      // if (isTokenUserIssuer(userToken)) {
      //   await updateUser(user._id, { $push: { logged_at: new Date() } });
      // }
      //
      // if (!req.locals) {
      //   req.locals = {};
      // }
      //
      // req.locals.user = user;
      // req.locals.userToken = userToken;
      // req.locals.token = token;
    } catch (error) {
      // return res.status(httpStatus.UNAUTHORIZED).send({ message: error.message });
    }

    return next();
  };
}
