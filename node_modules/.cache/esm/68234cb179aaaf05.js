let httpStatus,getAllUserDatabase,getOneUserDatabase,createUserDatabase,updateUserDatabase,deleteOneUserDatabase,encryptionService;_79a‍.x([["createUserController",()=>createUserController],["getAllUserController",()=>getAllUserController],["getOneUserController",()=>getOneUserController],["updateUserController",()=>updateUserController],["deleteOneUserController",()=>deleteOneUserController]]);_79a‍.w("http-status",[["default",["httpStatus"],function(v){httpStatus=v}]]);_79a‍.w("../../database/user",[["getAllUserDatabase",["getAllUserDatabase"],function(v){getAllUserDatabase=v}],["getOneUserDatabase",["getOneUserDatabase"],function(v){getOneUserDatabase=v}],["createUserDatabase",["createUserDatabase"],function(v){createUserDatabase=v}],["updateUserDatabase",["updateUserDatabase"],function(v){updateUserDatabase=v}],["deleteOneUserDatabase",["deleteOneUserDatabase"],function(v){deleteOneUserDatabase=v}]]);_79a‍.w("../../services/bcryptjs",[["encryptionService",["encryptionService"],function(v){encryptionService=v}]]);






       async function createUserController(req, res) {
  try {
    req.body.password = encryptionService.hashPassword(req.body.password);
    await createUserDatabase(req.body);
    return res.sendStatus(httpStatus.CREATED);
  } catch (error) {
    if (error.code === 11000) return res.send('email déja utiliser');
    return res.send(error);
  }
}

       async function getAllUserController(req, res) {
  const users = await getAllUserDatabase();
  return res.send(users);
}

       async function getOneUserController(req, res) {
  const userId = req.params.id;
  const user = await getOneUserDatabase(userId);
  return res.send(user);
}

       async function updateUserController(req, res) {
  const userId = req.params.id;
  await updateUserDatabase(userId, req.body);
  return res.sendStatus(httpStatus.OK);
}

       async function deleteOneUserController(req, res) {
  const userId = req.params.id;
  await deleteOneUserDatabase(userId);
  return res.sendStatus(httpStatus.NO_CONTENT);
}
